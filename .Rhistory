expect_equal(diff, 0, tolerance = 1e-4)
})
test_that("dense to annual with missing values", {
tsseas <- rep(c(1,4,5,2),2)
tsi <- c(2,5,NA,4,5,6,7,3,4,5,6,7,2,1,3,4,5,3,6,9)
obspyr <- 4
tsa <- toAnnualTS(tsseas, tsi, obspyr, dtmax = 1/12)
annual <- tsi[seq(3,20,by=4)]
expect_equal(tsa, annual, tolerance = 1e-4)
})
test_that("dense to annual with varying intra-annual selection period", {
tsseas <- rep(c(1,4,5,2),2)
tsi <- c(2,5,NA,4,5,6,7,3,4,5,6,7,2,1,3,4,5,NA,NA,9)
obspyr <- 4
tsa1 <- toAnnualTS(tsseas, tsi, obspyr, dtmax = 1/12)
annual1 <- tsi[seq(3,20,by=4)]
tsa2 <- toAnnualTS(tsseas, tsi, obspyr, dtmax = 1/2)
annual2 <- c(5, 7, 6, 3, 9)
expect_equal(tsa1, annual1, tolerance = 1e-4)
expect_equal(tsa2, annual2, tolerance = 1e-4)
})
tsio <- c(rep(1,8), seq(-5, 0, by = 0.5), rep(0, 8))
tdist <- 9
obspyr <- 1
shortDenseTS <- FALSE
nPre <- 2
nDist <- 0
nPostMin <- 4
nPostMax <- 5
h <- 0.2
seas <- F
metrics <- calcSegRec(tsio, 2, maxBreak = T, obspyr, h, shortDenseTS, nPre, nDist, nPostMin, nPostMax, timeThres = 2,seas = F)
expect_equal(metrics$RRI, NA, tolerance = 1e-4)
expect_equal(metrics$R80P, NA, tolerance = 1e-4)
expect_equal(metrics$YrYr, NA, tolerance = 1e-4)
metrics
tsio <- c(rep(1,8), seq(-5, 0, by = 0.5), rep(0, 8))
tdist <- 9
obspyr <- 1
shortDenseTS <- FALSE
nPre <- 2
nDist <- 0
nPostMin <- 4
nPostMax <- 5
h <- 0.2
seas <- F
metrics <- calcSegRec(tsio, 2, maxBreak = F, obspyr, h, shortDenseTS, nPre, nDist, nPostMin, nPostMax, timeThres = 2,seas = F)
expect_equal(metrics$RRI, NA, tolerance = 1e-4)
expect_equal(metrics$R80P, NA, tolerance = 1e-4)
expect_equal(metrics$YrYr, NA, tolerance = 1e-4)
metrics <- calcSegRec(tsio, 9, maxBreak = F, obspyr, h, shortDenseTS, nPre, nDist, nPostMin, nPostMax, timeThres = 2,seas = F)
metrics
metrics <- calcSegRec(tsio, 2, maxBreak = F, obspyr, h, shortDenseTS, nPre, nDist, nPostMin, nPostMax, timeThres = 2,seas = F)
expect_equal(metrics$RRI, NA, tolerance = 1e-4)
expect_equal(metrics$R80P, NA, tolerance = 1e-4)
expect_equal(metrics$YrYr, NA, tolerance = 1e-4)
tsio <- c(rep(1,8), seq(13, 0, by = 0.5), rep(0, 8))
metrics <- calcSegRec(tsio, 2, maxBreak = F, obspyr, h, shortDenseTS, nPre, nDist, nPostMin, nPostMax, timeThres = 2,seas = F)
expect_equal(metrics$RRI, NA, tolerance = 1e-4)
expect_equal(metrics$R80P, NA, tolerance = 1e-4)
expect_equal(metrics$YrYr, NA, tolerance = 1e-4)
tsio <- c(rep(1,8), seq(13, 0, by = -0.5), rep(0, 8))
metrics <- calcSegRec(tsio, 2, maxBreak = F, obspyr, h, shortDenseTS, nPre, nDist, nPostMin, nPostMax, timeThres = 2,seas = F)
expect_equal(metrics$RRI, NA, tolerance = 1e-4)
expect_equal(metrics$R80P, NA, tolerance = 1e-4)
expect_equal(metrics$YrYr, NA, tolerance = 1e-4)
tsio <- c(rep(1,8), seq(-5, -10, by = -0.5), rep(0, 8))
metrics <- calcSegRec(tsio, 2, maxBreak = F, obspyr, h, shortDenseTS, nPre, nDist, nPostMin, nPostMax, timeThres = 2,seas = F)
expect_equal(metrics$RRI, NA, tolerance = 1e-4)
expect_equal(metrics$R80P, NA, tolerance = 1e-4)
expect_equal(metrics$YrYr, NA, tolerance = 1e-4)
tsio <- c(rep(1,8), seq(-5, -2, by = -0.5),seq(-5, -3, by = -0.5), rep(0, 8))
metrics <- calcSegRec(tsio, 2, maxBreak = F, obspyr, h, shortDenseTS, nPre, nDist, nPostMin, nPostMax, timeThres = 2,seas = F)
expect_equal(metrics$RRI, NA, tolerance = 1e-4)
expect_equal(metrics$R80P, NA, tolerance = 1e-4)
expect_equal(metrics$YrYr, NA, tolerance = 1e-4)
plot(tsio)
# second break within recovery period
tsio <- c(rep(1,8), seq(-5, -2, by = -0.5),seq(-5, -3, by = -0.5), rep(0, 8))
# second break within recovery period
tsio <- c(rep(1,8), seq(-5, -2, by = 0.5),seq(-5, -3, by = 0.5), rep(0, 8))
plot(tsio)
metrics <- calcSegRec(tsio, 2, maxBreak = F, obspyr, h, shortDenseTS, nPre, nDist, nPostMin, nPostMax, timeThres = 2,seas = F)
expect_equal(metrics$RRI, NA, tolerance = 1e-4)
expect_equal(metrics$R80P, NA, tolerance = 1e-4)
expect_equal(metrics$YrYr, NA, tolerance = 1e-4)
# neg recovery
tsio <- c(rep(1,8), seq(-5, -10, by = -0.5), rep(0, 8))
plot(tsio)
metrics <- calcSegRec(tsio, 2, maxBreak = F, obspyr, h, shortDenseTS, nPre, nDist, nPostMin, nPostMax, timeThres = 2,seas = F)
expect_equal(metrics$RRI, NA, tolerance = 1e-4)
expect_equal(metrics$R80P, NA, tolerance = 1e-4)
expect_equal(metrics$YrYr, NA, tolerance = 1e-4)
knitr::opts_chunk$set(echo = TRUE, eval=F)
obsvec <- c(12, 365, 1, 4)
names(obsvec) <- c('monthly', 'daily', 'annual', 'quart')
obsvec$'monthly'
obsvec['monthly']
recSet <- as.data.frame()
recSet <- data.frame()
recSet
recSet <- data.frame()
recSet$maxBreak <-c(F)
recSet
recSet$maxBreak <-c(F)
recSet <- data.frame(maxBreak <-c(F))
recSet <- data.frame(maxBreak <-c(F))
recSet$inp <- c('segmented')
recSet$shortDenseTS <- F
recSet$nPre <- c(2)
recSet$nDist <- c(1)
recSet$nPostMin <- c(4)
recSet$nPostMax <- c(6)
recSet$h <- c(0.15)
recSet$timeThres <- c(1)
recSet$seas <- c(T)
recSet
recSet
recSet <- data.frame(maxBreak = c(F))
recSet
recSet <- data.frame(maxBreak = c(F))
recSet$inp <- c('segmented')
recSet$shortDenseTS <- F
recSet$nPre <- c(2)
recSet$nDist <- c(1)
recSet$nPostMin <- c(4)
recSet$nPostMax <- c(6)
recSet$h <- c(0.15)
recSet$timeThres <- c(1)
recSet$seas <- c(T)
recSet
recSet
dim(recSet)
document()
install()
knitr::opts_chunk$set(echo = TRUE, eval=F)
library(raster)
library(UpscaleRecovery)
library(bfast)
library(strucchange)
library(lubridate)
library(terra)
tempFun <- 'mean'
tempRes <- 'monthly'
forcefolder <- '/home/wanda/Documents/data/force/'
starttime <- c(1998,1,01)#start date: year, month, day
endtime <- c(2018,12,01)#end date: year, month, day
ext <- c(-43.38238361637443,-43.27938679020256,-4.555765244985907,-4.451717415449725)
# settings recovery indicators
recSet <- data.frame(maxBreak = c(F))
recSet$inp <- c('segmented')
recSet$shortDenseTS <- F
recSet$nPre <- c(2)
recSet$nDist <- c(1)
recSet$nPostMin <- c(4)
recSet$nPostMax <- c(6)
recSet$h <- c(0.15)
recSet$timeThres <- c(1)
recSet$seas <- c(T)
#' Set and generate folder structure to store data for the FORCE processing workflow
#'
#' @param forcefolder the main folder where all data needs to be stored (full path)
#'
#' @return generates a folder structure
#' @export
#'
setFolders <- function(forcefolder){
if (!dir.exists(forcefolder)){
stop('directory does not exist')
}
tmpfolder <- file.path(forcefolder, 'temp')
l1folder <- file.path(forcefolder, 'level1')
l2folder <- file.path(forcefolder, 'level2')
queuefolder <- file.path(forcefolder, 'level1')
queuefile <- 'queue.txt'
demfolder <- file.path(forcefolder, 'misc','dem')
wvpfolder <- file.path(forcefolder, 'misc','wvp')
logfolder <- file.path(forcefolder, 'log')
paramfolder <- file.path(forcefolder, 'param')
paramfile <- 'l2param.prm'
lcfolder <- file.path(forcefolder, 'misc','lc')# raw land cover data
tcfolder <- file.path(forcefolder, 'misc','tc')# raw tree cover data
firefolder <- file.path(forcefolder, 'misc','fire')# raw fire data
S2auxfolder <- file.path(forcefolder, 'misc', 'S2')# auxiliary S2 data (eg tile grid)
demlogfile <- file.path(logfolder,'DEM.txt')
wvplogfile <- file.path(logfolder,'WVP.txt')
landsatlogfile <- file.path(logfolder, 'Landsat.txt')
lclogfile <- file.path(logfolder, 'LC.txt')
firelogfile <- file.path(logfolder,'fire.txt')
tclogfile <- file.path(logfolder, 'tc.txt')
Sskiplogfile <- file.path(logfolder, 'Sskip.txt')
Ssuccesslogfile <- file.path(logfolder, 'Ssuccess.txt')
Smissionlogfile <- file.path(logfolder, 'Smission.txt')
Sotherlogfile <- file.path(logfolder, 'Sother.txt')
if(!dir.exists(forcefolder)){dir.create(forcefolder)}
if(!dir.exists(tmpfolder)){dir.create(tmpfolder)}
if(!dir.exists(l1folder)){dir.create(l1folder)}
if(!dir.exists(file.path(l1folder,'landsat'))){dir.create(file.path(l1folder,'landsat'))}
if(!dir.exists(file.path(l1folder,'sentinel'))){dir.create(file.path(l1folder,'sentinel'))}
if(!dir.exists(l2folder)){dir.create(l2folder)}
if(!dir.exists(queuefolder)){dir.create(queuefolder)}
if(!dir.exists(demfolder)){dir.create(demfolder, recursive = TRUE)}
if(!dir.exists(wvpfolder)){dir.create(wvpfolder, recursive = TRUE)}
if(!dir.exists(logfolder)){dir.create(logfolder)}
if(!dir.exists(S2auxfolder)){dir.create(S2auxfolder)}
if(!file.exists(demlogfile)){file.create(demlogfile)}# logfile for DEM
if(!file.exists(wvplogfile)){file.create(wvplogfile)}# logfile for WVP
if(!file.exists(landsatlogfile)){file.create(landsatlogfile)}# logfile for DEM
if(!file.exists(lclogfile)){file.create(lclogfile)}# logfile for DEM
if(!file.exists(firelogfile)){file.create(firelogfile)}# logfile for DEM
if(!file.exists(tclogfile)){file.create(tclogfile)}# logfile for DEMS
if(!file.exists(Sskiplogfile)){file.create(Sskiplogfile)}# logfile for skipped scenes
if(!file.exists(Ssuccesslogfile)){file.create(Ssuccesslogfile)}# logfile for successful scenes
if(!file.exists(Smissionlogfile)){file.create(Smissionlogfile)}# logfile for scenes with an unknown mission
if(!file.exists(Sotherlogfile)){file.create(Sotherlogfile)}# logfile for scenes with an unrecoginized processing status
if(!file.exists(file.path(queuefolder,queuefile))){file.create(file.path(queuefolder,queuefile))}# generate a queue file
if(!dir.exists(paramfolder)){dir.create(paramfolder)}
if(!dir.exists(lcfolder)){dir.create(lcfolder)}
if(!dir.exists(tcfolder)){dir.create(tcfolder)}
if(!dir.exists(firefolder)){dir.create(firefolder)}
out <- c(tmpfolder, l1folder, l2folder, queuefolder, queuefile, demfolder, wvpfolder, logfolder, paramfolder, paramfile,
lcfolder, tcfolder, firefolder, S2auxfolder, demlogfile, wvplogfile, landsatlogfile, lclogfile, firelogfile, tclogfile, Sskiplogfile, Ssuccesslogfile, Smissionlogfile, Sotherlogfile)
names(out) <- c('tmpfolder', 'l1folder', 'l2folder', 'queuefolder', 'queuefile', 'demfolder', 'wvpfolder', 'logfolder', 'paramfolder', 'paramfile',
'lcfolder', 'tcfolder', 'firefolder', 'S2auxfolder', 'demlogfile', 'wvplogfile', 'landsatlogfile', 'lclogfile', 'firelogfile', 'tclogfile','Sskiplogfile', 'Ssuccesslogfile', 'Smissionlogfile', 'Sotherlogfile')
return(out)
}
# open folder structure
fldrs <- setFolders(forcefolder)
fldrs
fldrs[['l2folder']]
list.folders(fldrs[['l2folder']])
list.files(fldrs[['l2folder']])
?list.files
# list available Bottom Of Atmosphere files
img <- list.dirs(file.path(forcefolder,l2folder),'*_BOA.tif')
list.dirs(fldrs[['l2folder']])
list.dirs(fldrs[['l2folder']], recursive = F)
continents <- file.path(fldrs[['l2folder']],c('n-america','s-america'))
continents
continents <- continents %in% list.dirs(fldrs[['l2folder']], recursive = F)
continents
continents <- file.path(fldrs[['l2folder']],c('n-america','s-america'))
continents <- continents[continents %in% list.dirs(fldrs[['l2folder']], recursive = F)]
continents
#' Extract the extent of each grid tile that covers an area of interest
#'
#' @param l2folder directory of the level2 data cube
#' @param cubefolder folder inside the level2 directory where the data cube is stored
#' @param ext extent of the area of interest
#'
#' @return list of extents
#' @import raster
#' @import sp
#' @export
#'
getGrid <- function(l2folder, cubefolder, ext){
system(paste0("force-tabulate-grid ", file.path(l2folder, cubefolder), " ", ext[3]," ", ext[4]," ", ext[1]," ", ext[2], " shp"), intern = TRUE, ignore.stderr = TRUE)
# load shapefile
p <- shapefile(file.path(l2folder, cubefolder, 'shp',"grid.shp"))
# transform crs to crs of interest
p_wgs <- spTransform(p, CRS("+proj=longlat +datum=WGS84"))
# extent of each polygon/tile
elist <- lapply(1:length(p_wgs), function(i) extent(p_wgs[i,]))
return(elist)
}
length(continents)
gi <-
1
# get the tiles that overlap with the AOI
elist <- getGrid(fldrs[['l2folder']], continents[gi], ext)
elist
getGrid <- function(cubefolder, ext){
system(paste0("force-tabulate-grid ", cubefolder, " ", ext[3]," ", ext[4]," ", ext[1]," ", ext[2], " shp"), intern = TRUE, ignore.stderr = TRUE)
# load shapefile
p <- shapefile(file.path(cubefolder, 'shp',"grid.shp"))
# transform crs to crs of interest
p_wgs <- spTransform(p, CRS("+proj=longlat +datum=WGS84"))
# extent of each polygon/tile
elist <- lapply(1:length(p_wgs), function(i) extent(p_wgs[i,]))
return(elist)
}
# get the tiles that overlap with the AOI
elist <- getGrid(continents[gi], ext)
elist
p <- shapefile(file.path(contintents[gi], 'shp',"grid.shp"))
p <- shapefile(file.path(continents[gi], 'shp',"grid.shp"))
# transform crs to crs of interest
p_wgs <- spTransform(p, CRS("+proj=longlat +datum=WGS84"))
p_wgs
# extent of each polygon/tile
elist <- lapply(1:length(p_wgs), function(i) extent(p_wgs[i,]))
elist
p_wgs$Tile_ID
names(elist) <- p_wgs$Tile_ID
elist
p_wgs
p_wgs@polygons
getGrid <- function(cubefolder, ext){
system(paste0("force-tabulate-grid ", cubefolder, " ", ext[3]," ", ext[4]," ", ext[1]," ", ext[2], " shp"), intern = TRUE, ignore.stderr = TRUE)
# load shapefile
p <- shapefile(file.path(cubefolder, 'shp',"grid.shp"))
# transform crs to crs of interest
p_wgs <- spTransform(p, CRS("+proj=longlat +datum=WGS84"))
# extent of each polygon/tile
elist <- lapply(1:length(p_wgs), function(i) extent(p_wgs[i,]))
names(elist) <- p_wgs$Tile_ID
return(elist)
}
names(elist)
tilename <- names(elist)[ti]
ti <- 1
tilename <- names(elist)[ti]
tilename
exti <- elist[[ti]]
# generate folder for temporary data of study area of interest
extfolder <- file.path(forcefolder, 'temp', paste0('Area', exti[1],'_', exti[2],'_', exti[3],'_', exti[4]))
# folder with data of interest
tilefolder <- file.path(fldrs[['l2folder']],continents[gi], tilename)
tilefolder
# list available Bottom Of Atmosphere files
img <- list.files(file.path(forcefolder,l2folder),'*_BOA.tif')
# list available Bottom Of Atmosphere files
img <- list.files(file.path(forcefolder,tilefolder),'*_BOA.tif')
img
# list available Bottom Of Atmosphere files
img <- list.files(file.path(tilefolder),'*_BOA.tif')
tiles
fmask <- rast(file.path(tilefolder,'mask.tif'))
names(elist)
ti <- 4
tilename <- names(elist)[ti]
# folder with data of interest
tilefolder <- file.path(fldrs[['l2folder']],continents[gi], tilename)
# list available Bottom Of Atmosphere files
img <- list.files(file.path(tilefolder),'*_BOA.tif')
img
# list available Bottom Of Atmosphere files
img <- list.files(tilefolder,'*_BOA.tif')
img
# list available Bottom Of Atmosphere files
img <- list.files(tilefolder,pattern = '*_BOA.tif')
tilefolder
# folder with data of interest
tilefolder <- file.path(continents[gi], tilename)
# list available Bottom Of Atmosphere files
img <- list.files(tilefolder,pattern = '*_BOA.tif')
# extract the dates and sensors of the available data
prts <- strsplit(img,'_')
ldts <- as.Date(unlist(lapply(prts, '[[', 1)),'%Y%m%d')
lsens <- unlist(lapply(prts, '[[', 3))
lsens
ldts
fmask <- rast(file.path(tilefolder,'mask.tif'))
fmask
rm(prts)
library(raster)
library(UpscaleRecovery)
library(bfast)
library(strucchange)
library(lubridate)
library(terra)
tempFun <- 'mean'
tempRes <- 'monthly'
forcefolder <- '/home/wanda/Documents/data/force/'
starttime <- c(1998,1,01)#start date: year, month, day
endtime <- c(2018,12,01)#end date: year, month, day
ext <- c(-43.38238361637443,-43.27938679020256,-4.555765244985907,-4.451717415449725)
# settings recovery indicators
recSet <- data.frame(maxBreak = c(F))
recSet$inp <- c('segmented')
recSet$shortDenseTS <- F
recSet$nPre <- c(2)
recSet$nDist <- c(1)
recSet$nPostMin <- c(4)
recSet$nPostMax <- c(6)
recSet$h <- c(0.15)
recSet$timeThres <- c(1)
recSet$seas <- c(T)
# open folder structure
fldrs <- setFolders(forcefolder)
setFolders <- function(forcefolder){
if (!dir.exists(forcefolder)){
stop('directory does not exist')
}
tmpfolder <- file.path(forcefolder, 'temp')
l1folder <- file.path(forcefolder, 'level1')
l2folder <- file.path(forcefolder, 'level2')
queuefolder <- file.path(forcefolder, 'level1')
queuefile <- 'queue.txt'
demfolder <- file.path(forcefolder, 'misc','dem')
wvpfolder <- file.path(forcefolder, 'misc','wvp')
logfolder <- file.path(forcefolder, 'log')
paramfolder <- file.path(forcefolder, 'param')
paramfile <- 'l2param.prm'
lcfolder <- file.path(forcefolder, 'misc','lc')# raw land cover data
tcfolder <- file.path(forcefolder, 'misc','tc')# raw tree cover data
firefolder <- file.path(forcefolder, 'misc','fire')# raw fire data
S2auxfolder <- file.path(forcefolder, 'misc', 'S2')# auxiliary S2 data (eg tile grid)
demlogfile <- file.path(logfolder,'DEM.txt')
wvplogfile <- file.path(logfolder,'WVP.txt')
landsatlogfile <- file.path(logfolder, 'Landsat.txt')
lclogfile <- file.path(logfolder, 'LC.txt')
firelogfile <- file.path(logfolder,'fire.txt')
tclogfile <- file.path(logfolder, 'tc.txt')
Sskiplogfile <- file.path(logfolder, 'Sskip.txt')
Ssuccesslogfile <- file.path(logfolder, 'Ssuccess.txt')
Smissionlogfile <- file.path(logfolder, 'Smission.txt')
Sotherlogfile <- file.path(logfolder, 'Sother.txt')
if(!dir.exists(forcefolder)){dir.create(forcefolder)}
if(!dir.exists(tmpfolder)){dir.create(tmpfolder)}
if(!dir.exists(l1folder)){dir.create(l1folder)}
if(!dir.exists(file.path(l1folder,'landsat'))){dir.create(file.path(l1folder,'landsat'))}
if(!dir.exists(file.path(l1folder,'sentinel'))){dir.create(file.path(l1folder,'sentinel'))}
if(!dir.exists(l2folder)){dir.create(l2folder)}
if(!dir.exists(queuefolder)){dir.create(queuefolder)}
if(!dir.exists(demfolder)){dir.create(demfolder, recursive = TRUE)}
if(!dir.exists(wvpfolder)){dir.create(wvpfolder, recursive = TRUE)}
if(!dir.exists(logfolder)){dir.create(logfolder)}
if(!dir.exists(S2auxfolder)){dir.create(S2auxfolder)}
if(!file.exists(demlogfile)){file.create(demlogfile)}# logfile for DEM
if(!file.exists(wvplogfile)){file.create(wvplogfile)}# logfile for WVP
if(!file.exists(landsatlogfile)){file.create(landsatlogfile)}# logfile for DEM
if(!file.exists(lclogfile)){file.create(lclogfile)}# logfile for DEM
if(!file.exists(firelogfile)){file.create(firelogfile)}# logfile for DEM
if(!file.exists(tclogfile)){file.create(tclogfile)}# logfile for DEMS
if(!file.exists(Sskiplogfile)){file.create(Sskiplogfile)}# logfile for skipped scenes
if(!file.exists(Ssuccesslogfile)){file.create(Ssuccesslogfile)}# logfile for successful scenes
if(!file.exists(Smissionlogfile)){file.create(Smissionlogfile)}# logfile for scenes with an unknown mission
if(!file.exists(Sotherlogfile)){file.create(Sotherlogfile)}# logfile for scenes with an unrecoginized processing status
if(!file.exists(file.path(queuefolder,queuefile))){file.create(file.path(queuefolder,queuefile))}# generate a queue file
if(!dir.exists(paramfolder)){dir.create(paramfolder)}
if(!dir.exists(lcfolder)){dir.create(lcfolder)}
if(!dir.exists(tcfolder)){dir.create(tcfolder)}
if(!dir.exists(firefolder)){dir.create(firefolder)}
out <- c(tmpfolder, l1folder, l2folder, queuefolder, queuefile, demfolder, wvpfolder, logfolder, paramfolder, paramfile,
lcfolder, tcfolder, firefolder, S2auxfolder, demlogfile, wvplogfile, landsatlogfile, lclogfile, firelogfile, tclogfile, Sskiplogfile, Ssuccesslogfile, Smissionlogfile, Sotherlogfile)
names(out) <- c('tmpfolder', 'l1folder', 'l2folder', 'queuefolder', 'queuefile', 'demfolder', 'wvpfolder', 'logfolder', 'paramfolder', 'paramfile',
'lcfolder', 'tcfolder', 'firefolder', 'S2auxfolder', 'demlogfile', 'wvplogfile', 'landsatlogfile', 'lclogfile', 'firelogfile', 'tclogfile','Sskiplogfile', 'Ssuccesslogfile', 'Smissionlogfile', 'Sotherlogfile')
return(out)
}
getGrid <- function(cubefolder, ext){
system(paste0("force-tabulate-grid ", cubefolder, " ", ext[3]," ", ext[4]," ", ext[1]," ", ext[2], " shp"), intern = TRUE, ignore.stderr = TRUE)
# load shapefile
p <- shapefile(file.path(cubefolder, 'shp',"grid.shp"))
# transform crs to crs of interest
p_wgs <- spTransform(p, CRS("+proj=longlat +datum=WGS84"))
# extent of each polygon/tile
elist <- lapply(1:length(p_wgs), function(i) extent(p_wgs[i,]))
names(elist) <- p_wgs$Tile_ID
return(elist)
}
# open folder structure
fldrs <- setFolders(forcefolder)
continents <- file.path(fldrs[['l2folder']],c('n-america', 's-america', 'europe', 'asia', 'africa', 'oceania', 'antartica'))
continents <- continents[continents %in% list.dirs(fldrs[['l2folder']], recursive = F)]
gi <- 1
# get the tiles that overlap with the AOI
elist <- getGrid(continents[gi], ext)
getGrid(continents[gi], c(30,40,30,40))
getGrid(continents[gi], c(60,70,60,70))
getGrid(continents[gi], c(-40,-50,-60,-70))
getGrid(continents[gi], c(-50,-60,-10,-20))
getGrid(continents[gi], c(-10,-20,-50,-60))
paste0("force-tabulate-grid ", tilefolder, " ", ext[3]," ", ext[4]," ", ext[1]," ", ext[2], " shp")
paste0("force-tabulate-grid ", continents[gi], " ", ext[3]," ", ext[4]," ", ext[1]," ", ext[2], " shp")
extfolder
continents <- file.path(fldrs[['l2folder']],c('n-america', 's-america', 'europe', 'asia', 'africa', 'oceania', 'antartica'))
continents <- continents[continents %in% list.dirs(fldrs[['l2folder']], recursive = F)]
# get the tiles that overlap with the AOI
elist <- getGrid(continents[gi], ext)
elist <- getGrid(continents[gi], ext)
elist <- getGrid(continents[gi], ext)
getGrid <- function(cubefolder, ext){
system(paste0("force-tabulate-grid ", cubefolder, " ", ext[3]," ", ext[4]," ", ext[1]," ", ext[2], " shp"), intern = TRUE, ignore.stderr = TRUE)
# load shapefile
p <- shapefile(file.path(cubefolder, 'shp',"grid.shp"))
# transform crs to crs of interest
p_wgs <- spTransform(p, CRS("+proj=longlat +datum=WGS84"))
# extent of each polygon/tile
elist <- lapply(1:length(p_wgs), function(i) extent(p_wgs[i,]))
names(elist) <- p_wgs$Tile_ID
unlink(file.path(cubefolder, 'shp'), recursive = T)
return(elist)
}
# get the tiles that overlap with the AOI
elist <- getGrid(continents[gi], ext)
elist
getGrid(continents[gi], c(-50,-60,-10,-20))
getGrid(continents[gi], c(50,60,30,40))
# get the tiles that overlap with the AOI
elist <- getGrid(continents[gi], ext)
ti
ti <- 1
exti <- elist[[ti]]
tilename <- names(elist)[ti]
# folder with data of interest
tile
# folder with data of interest
tilefolder <- file.path(continents[gi], tilename)
dir.exists(tilefolder)
# generate folder for temporary data of study area of interest
extfolder <- file.path(forcefolder, 'temp', paste0('Area', exti[1],'_', exti[2],'_', exti[3],'_', exti[4]))
if(!dir.exists(extfolder)){dir.create(extfolder)}
# list available Bottom Of Atmosphere files
img <- list.files(tilefolder,pattern = '*_BOA.tif')
# extract the dates and sensors of the available data
prts <- strsplit(img,'_')
ldts <- as.Date(unlist(lapply(prts, '[[', 1)),'%Y%m%d')
lsens <- unlist(lapply(prts, '[[', 3))
fmask <- rast(file.path(tilefolder,'mask.tif'))
rm(prts)
fmask
