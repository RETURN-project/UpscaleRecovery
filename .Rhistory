st[,][4,]
# assign dates to stack
names(st) <- ldts
if(tempRes == 'monthly'){
ldts <- rollback(ldts, roll_to_first = TRUE, preserve_hms = TRUE)
}
tsbr <- app(c(fmask,st), fun = function(x){toRegularTSStack(x, ldts, fun = tempFun, resol = tempRes)})# tsbr <- calc(stack(fmask,st), function(x){toRegularTSStack(x, ldts, fun = tempFun, resol = tempRes)})#
tres <- c('1 month', '3 months', '1 day', '1 year')
names(tres) <- c('monthly', 'quarterly', 'daily', 'yearly')
dtsbr <- switch(((tempRes == 'quarterly')+1),seq(min(ldts), max(ldts), by = tres[tempRes]),
seq(as.Date(paste0(format(min(ldts),'%Y'),'-01-01')), max(ldts), by = tres[tempRes]))
tsbr[,][4,]
st[,][4,]
mean(c((44-4)/(48),(84-14)/(84+14)))
st <- prepareNBRstack(img_list, qai_list, fmask, lsens, ldts, tempFun, tempRes, starttime, endtime)
expect_equal(as.numeric(st[,][4,]),c(NA,(4-14)/(4+14),mean(c((44-4)/(48),(84-14)/(84+14))),rep(NA,16),(64-14)/(64+14),rep(NA,4)))
st <- prepareNBRstack(img_list, qai_list, fmask, lsens, ldts, tempFun, tempRes, starttime, endtime)
library(lubridate)
st <- prepareNBRstack(img_list, qai_list, fmask, lsens, ldts, tempFun, tempRes, starttime, endtime)
expect_equal(as.numeric(st[,][4,]),c(NA,(4-14)/(4+14),mean(c((44-4)/(48),(84-14)/(84+14))),rep(NA,16),(64-14)/(64+14),rep(NA,4)))
expect_equal(sum(is.na(st[,][5,])),24)
expect_equal(as.numeric(st[,][6,]),c(NA,(1-11)/(1+11),mean(c((41-1)/(42),(81-11)/(81+11))),rep(NA,16),(61-11)/(61+11),rep(NA,4)))
st[,][6,]
expect_equal(sum(is.na(st[,][6,])),24)
expect_equal(sum(is.na(st[,][7,])),24)
expect_equal(as.numeric(st[,][9,]),c(NA,(9-19)/(9+19),mean(c((49-9)/(58),(89-19)/(89+19))),rep(NA,21)))
st[,][9,]
expect_equal(as.numeric(st[,][9,]),c(NA,NA,mean(c((49-9)/(58),(89-19)/(89+19))),rep(NA,21)))
expect_equal(as.numeric(st[,][9,]),c(NA,NA,(89-19)/(89+19),rep(NA,21)))
st[,][8,]
expect_equal(as.numeric(st[,][8,]),c(NA,(8-18)/(8+18),mean(c((48-8)/(56),(88-18)/(88+18))),rep(NA,16),(68-18)/(68+18),rep(NA,4)))
st[,][8,]
mean(c((48-8)/(56),(88-18)/(88+18)))
(48-8)/(56)
(88-18)/(88+18)
48+8
(48-8)/(56)
st[,][8,]
expect_equal(as.numeric(st[,][1,]),c(NA,(1-11)/(1+11),mean(c((41-1)/(42),(81-11)/(81+11))),rep(NA,16),(61-11)/(61+11),rep(NA,4)))
expect_equal(sum(is.na(st[,][2,])),24)
expect_equal(sum(is.na(st[,][3,])),24)
expect_equal(as.numeric(st[,][4,]),c(NA,(4-14)/(4+14),mean(c((44-4)/(48),(84-14)/(84+14))),rep(NA,16),(64-14)/(64+14),rep(NA,4)))
expect_equal(sum(is.na(st[,][5,])),24)
expect_equal(sum(is.na(st[,][6,])),24)
expect_equal(sum(is.na(st[,][7,])),24)
e
st[,][3,]
expect_equal(as.numeric(st[,][1,]),c(NA,(1-11)/(1+11),mean(c((41-1)/(42),(81-11)/(81+11))),rep(NA,16),(61-11)/(61+11),rep(NA,4)))
expect_equal(sum(is.na(st[,][2,])),24)
expect_equal(as.numeric(st[,][3,]),c(rep(NA,19),(63-13)/(63+13),rep(NA,4)))
expect_equal(as.numeric(st[,][4,]),c(NA,(4-14)/(4+14),mean(c((44-4)/(48),(84-14)/(84+14))),rep(NA,16),(64-14)/(64+14),rep(NA,4)))
expect_equal(sum(is.na(st[,][5,])),24)
expect_equal(sum(is.na(st[,][6,])),24)
expect_equal(sum(is.na(st[,][7,])),24)
expect_equal(as.numeric(st[,][9,]),c(NA,NA,(89-19)/(89+19),rep(NA,21)))
expect_equal(as.numeric(st[,][8,]),c(NA,(8-18)/(8+18),mean(c((48-8)/(56),(88-18)/(88+18))),rep(NA,16),(68-18)/(68+18),rep(NA,4)))
st[,][8,]
lnd5_qai <- empty_rast; values(lnd5_qai) <- c(0,0,63, 64,0,8292,0,8256,2)
sen2_qai <- empty_rast2; values(sen2_qai) <- c(0,0,0,0,0,0,63,63,63,
0,0,0,0,0,0,63,63,63,
0,0,0,0,0,0,63,63,63,
64,64,64,0,0,0,8292,8292,8292,
64,2,64,0,0,0,8292,8292,8292,
64,64,64,0,0,0,8292,8292,8292,
0,0,0,8256,8256,8256,2,2,2,
0,0,0,8256,8256,8256,2,2,2,
0,0,0,8256,8256,8256,2,2,2)
lnd8_qai <- empty_rast; values(lnd8_qai) <- c(0,0,63, 64,0,8292,0,8256,0)
lnd7_qai <- empty_rast; values(lnd7_qai) <- c(0,0,64, 64,0,8292,0,8256,2)
img_list <- list(lnd5,sen2,lnd8,lnd7)
qai_list <- list(lnd5_qai,sen2_qai,lnd8_qai,lnd7_qai)
fmask <- empty_rast; values(fmask) <- c(1,0,1,1,NA,1,NaN,1,1)
lsens <- c('LND05', 'SEN2A', 'LND08', 'LND07')
ldts <- as.Date(c('2000-2-4','2000-3-15','2000-3-20','2001-8-2'))
tempFun <- 'mean'
tempRes <- 'monthly'
starttime <- c(2000,1,1)
endtime <- c(2001,12,31)
st <- prepareNBRstack(img_list, qai_list, fmask, lsens, ldts, tempFun, tempRes, starttime, endtime)
st[,][7,]
lnd8_1 <- empty_rast; values(lnd8_1) <- rep(1,9)
lnd8_2 <- empty_rast; values(lnd8_2) <- rep(100,9)
lnd8_3 <- empty_rast; values(lnd8_3) <- rep(55,9)
lnd8_4 <- empty_rast; values(lnd8_4) <- 81:89
lnd8_5 <- empty_rast; values(lnd8_5) <- rep(44,9)
lnd8_6 <- empty_rast; values(lnd8_6) <- 11:19
lnd8 <- c(lnd8_1, lnd8_2, lnd8_3, lnd8_4, lnd8_5, lnd8_6)
lnd7_1 <- empty_rast; values(lnd7_1) <- rep(1,9)
lnd7_2 <- empty_rast; values(lnd7_2) <- rep(100,9)
lnd7_3 <- empty_rast; values(lnd7_3) <- rep(55,9)
lnd7_4 <- empty_rast; values(lnd7_4) <- 61:69
lnd7_5 <- empty_rast; values(lnd7_5) <- rep(44,9)
lnd7_6 <- empty_rast; values(lnd7_6) <- 11:19
lnd7 <- c(lnd7_1, lnd7_2, lnd7_3, lnd7_4, lnd7_5, lnd7_6)
lnd5_qai <- empty_rast; values(lnd5_qai) <- c(0,0,63, 64,0,8292,0,8256,2)
sen2_qai <- empty_rast2; values(sen2_qai) <- c(0,0,0,0,0,0,63,63,63,
0,0,0,0,0,0,63,63,63,
0,0,0,0,0,0,63,63,63,
64,64,64,0,0,0,8292,8292,8292,
64,2,64,0,0,0,8292,8292,8292,
64,64,64,0,0,0,8292,8292,8292,
0,0,0,8256,8256,8256,2,2,2,
0,2,0,8256,8256,8256,2,2,2,
0,0,0,8256,8256,8256,2,2,2)
lnd8_qai <- empty_rast; values(lnd8_qai) <- c(0,0,63, 64,0,8292,0,8256,0)
lnd7_qai <- empty_rast; values(lnd7_qai) <- c(0,0,64, 64,0,8292,0,8256,2)
img_list <- list(lnd5,sen2,lnd8,lnd7)
qai_list <- list(lnd5_qai,sen2_qai,lnd8_qai,lnd7_qai)
fmask <- empty_rast; values(fmask) <- c(1,0,1,1,NA,1,NaN,1,1)
lsens <- c('LND05', 'SEN2A', 'LND08', 'LND07')
ldts <- as.Date(c('2000-2-4','2000-3-15','2000-3-20','2001-8-2'))
tempFun <- 'mean'
tempRes <- 'monthly'
starttime <- c(2000,1,1)
endtime <- c(2001,12,31)
st <- prepareNBRstack(img_list, qai_list, fmask, lsens, ldts, tempFun, tempRes, starttime, endtime)
warnings()
st[,][8,]
st[,][7,]
document()
warnings(... = )
warnings()
rm(list = c("prepareNBRstack"))
install()
library(terra)
empty_rast <- rast(nrows = 3, ncols = 3)
empty_rast2 <- rast(nrows = 9, ncols = 9)
lnd5_1 <- empty_rast; values(lnd5_1) <- rep(1,9)
lnd5_2 <- empty_rast; values(lnd5_2) <- rep(100,9)
lnd5_3 <- empty_rast; values(lnd5_3) <- rep(55,9)
lnd5_4 <- empty_rast; values(lnd5_4) <- 1:9
lnd5_5 <- empty_rast; values(lnd5_5) <- rep(44,9)
lnd5_6 <- empty_rast; values(lnd5_6) <- 11:19
lnd5 <- c(lnd5_1, lnd5_2, lnd5_3, lnd5_4, lnd5_5, lnd5_6)
sen2_1 <- empty_rast2; values(sen2_1) <- rep(5, times = 81)
sen2_2 <- empty_rast2; values(sen2_2) <- rep(5, times = 81)
sen2_3 <- empty_rast2; values(sen2_3) <- rep(5, times = 81)
sen2_4 <- empty_rast2; values(sen2_4) <- rep(5, times = 81)
sen2_5 <- empty_rast2; values(sen2_5) <- rep(5, times = 81)
sen2_6 <- empty_rast2; values(sen2_6) <- rep(5, times = 81)
sen2_7 <- empty_rast2; values(sen2_7) <- rep(5, times = 81)
sen2_8 <- empty_rast2; values(sen2_8) <- c(rep(rep(41:43, each =3), times = 3),
rep(rep(44:46, each =3), times = 3),
rep(rep(47:49, each =3), times = 3))
sen2_9 <- empty_rast2; values(sen2_9) <- rep(5, times = 81)
sen2_10 <- empty_rast2; values(sen2_10) <- c(rep(rep(1:3, each =3), times = 3),
rep(rep(4:6, each =3), times = 3),
rep(rep(7:9, each =3),
c(7,100,7,8,8,8,9,9,9),
rep(7:9, each =3)))
sen2 <- c(sen2_1, sen2_2, sen2_3, sen2_4, sen2_5, sen2_6, sen2_7, sen2_8, sen2_9, sen2_10)
lnd8_1 <- empty_rast; values(lnd8_1) <- rep(1,9)
lnd8_2 <- empty_rast; values(lnd8_2) <- rep(100,9)
lnd8_3 <- empty_rast; values(lnd8_3) <- rep(55,9)
lnd8_4 <- empty_rast; values(lnd8_4) <- 81:89
lnd8_5 <- empty_rast; values(lnd8_5) <- rep(44,9)
lnd8_6 <- empty_rast; values(lnd8_6) <- 11:19
lnd8 <- c(lnd8_1, lnd8_2, lnd8_3, lnd8_4, lnd8_5, lnd8_6)
lnd7_1 <- empty_rast; values(lnd7_1) <- rep(1,9)
lnd7_2 <- empty_rast; values(lnd7_2) <- rep(100,9)
lnd7_3 <- empty_rast; values(lnd7_3) <- rep(55,9)
lnd7_4 <- empty_rast; values(lnd7_4) <- 61:69
lnd7_5 <- empty_rast; values(lnd7_5) <- rep(44,9)
lnd7_6 <- empty_rast; values(lnd7_6) <- 11:19
lnd7 <- c(lnd7_1, lnd7_2, lnd7_3, lnd7_4, lnd7_5, lnd7_6)
lnd5_qai <- empty_rast; values(lnd5_qai) <- c(0,0,63, 64,0,8292,0,8256,2)
sen2_qai <- empty_rast2; values(sen2_qai) <- c(0,0,0,0,0,0,63,63,63,
0,0,0,0,0,0,63,63,63,
0,0,0,0,0,0,63,63,63,
64,64,64,0,0,0,8292,8292,8292,
64,2,64,0,0,0,8292,8292,8292,
64,64,64,0,0,0,8292,8292,8292,
0,0,0,8256,8256,8256,2,2,2,
0,2,0,8256,8256,8256,2,2,2,
0,0,0,8256,8256,8256,2,2,2)
lnd8_qai <- empty_rast; values(lnd8_qai) <- c(0,0,63, 64,0,8292,0,8256,0)
lnd7_qai <- empty_rast; values(lnd7_qai) <- c(0,0,64, 64,0,8292,0,8256,2)
img_list <- list(lnd5,sen2,lnd8,lnd7)
qai_list <- list(lnd5_qai,sen2_qai,lnd8_qai,lnd7_qai)
fmask <- empty_rast; values(fmask) <- c(1,0,1,1,NA,1,NaN,1,1)
lsens <- c('LND05', 'SEN2A', 'LND08', 'LND07')
ldts <- as.Date(c('2000-2-4','2000-3-15','2000-3-20','2001-8-2'))
tempFun <- 'mean'
tempRes <- 'monthly'
starttime <- c(2000,1,1)
endtime <- c(2001,12,31)
st <- prepareNBRstack(img_list, qai_list, fmask, lsens, ldts, tempFun, tempRes, starttime, endtime)
warnings()
expect_equal(as.numeric(st[,][1,]),c(NA,(1-11)/(1+11),mean(c((41-1)/(42),(81-11)/(81+11))),rep(NA,16),(61-11)/(61+11),rep(NA,4)))
expect_equal(sum(is.na(st[,][2,])),24)
expect_equal(as.numeric(st[,][3,]),c(rep(NA,19),(63-13)/(63+13),rep(NA,4)))
expect_equal(as.numeric(st[,][4,]),c(NA,(4-14)/(4+14),mean(c((44-4)/(48),(84-14)/(84+14))),rep(NA,16),(64-14)/(64+14),rep(NA,4)))
expect_equal(sum(is.na(st[,][5,])),24)
expect_equal(sum(is.na(st[,][6,])),24)
expect_equal(sum(is.na(st[,][7,])),24)
expect_equal(as.numeric(st[,][8,]),c(NA,(8-18)/(8+18),mean(c((48-8)/(56),(88-18)/(88+18))),rep(NA,16),(68-18)/(68+18),rep(NA,4)))
expect_equal(as.numeric(st[,][9,]),c(NA,NA,(89-19)/(89+19),rep(NA,21)))
fmask <- empty_rast; values(fmask) <- c(1,0,1,1,NA,1,1,NaN,1)
st <- prepareNBRstack(img_list, qai_list, fmask, lsens, ldts, tempFun, tempRes, starttime, endtime)
expect_equal(sum(is.na(st[,][7,])),24)
fmask <- empty_rast; values(fmask) <- c(1,0,1,1,NA,NaN,1,1,1)
st <- prepareNBRstack(img_list, qai_list, fmask, lsens, ldts, tempFun, tempRes, starttime, endtime)
expect_equal(sum(is.na(st[,][6,])),24)
expect_equal(sum(is.na(st[,][7,])),24)
expect_equal(as.numeric(st[,][8,]),c(NA,(8-18)/(8+18),mean(c((48-8)/(56),(88-18)/(88+18))),rep(NA,16),(68-18)/(68+18),rep(NA,4)))
expect_equal(as.numeric(st[,][9,]),c(NA,NA,(89-19)/(89+19),rep(NA,21)))
st[,][7,])
st[,][7,]
expect_equal(as.numeric(st[,][8,]),c(NA,(7-17)/(7+17),mean(c((47-7)/(54),(87-17)/(87+17))),rep(NA,16),(67-17)/(67+17),rep(NA,4)))
expect_equal(as.numeric(st[,][7,]),c(NA,(7-17)/(7+17),mean(c((47-7)/(54),(87-17)/(87+17))),rep(NA,16),(67-17)/(67+17),rep(NA,4)))
st[,][7,]
for(i in 1:length(img_list)){# iterate over the BOA layers (each layer is associated with a particular date)
# open image
im <- img_list[[i]]#rast(file.path(tilefolder,img[i]))# load the image with spectral data
qaim <- qai_list[[i]]#rast(file.path(tilefolder,gsub("BOA", "QAI", img[i])))# load the Quality Assurance layer
# calculate NBR
nbri <- switch(1+ ((lsens[i] == 'SEN2A') | (lsens[i] == 'SEN2B')), calcNBR(im[[4]], im[[6]]), calcNBR(im[[8]], im[[10]]))
# mask low quality data
nbrf <- mskQA(nbri, qaim, slope = c(0,1), aero = c(0,1))
# resample S2 to the spatial resolution of Landsat
if ((lsens[i] == 'SEN2A') | (lsens[i] == 'SEN2B')){
nbrf <- terra::aggregate(nbrf, fact = 3, fun=mmean)
}
# mask data using forest fire mask
nbrf[fmask!=1] <- NA
# add image to stack
if(i == 1){
st <- nbrf
}else{
st <- c(st, nbrf)
}
rm(nbri, nbrf, im, qaim)
}
# assign dates to stack
names(st) <- ldts
st[,][è,]
st[,][7,]
if(tempRes == 'monthly'){
ldts <- rollback(ldts, roll_to_first = TRUE, preserve_hms = TRUE)
}
tsbr <- app(c(fmask,st), fun = function(x){toRegularTSStack(x, ldts, fun = tempFun, resol = tempRes)})# tsbr <- calc(stack(fmask,st), function(x){toRegularTSStack(x, ldts, fun = tempFun, resol = tempRes)})#
tres <- c('1 month', '3 months', '1 day', '1 year')
names(tres) <- c('monthly', 'quarterly', 'daily', 'yearly')
dtsbr <- switch(((tempRes == 'quarterly')+1),seq(min(ldts), max(ldts), by = tres[tempRes]),
seq(as.Date(paste0(format(min(ldts),'%Y'),'-01-01')), max(ldts), by = tres[tempRes]))
st[,][7,]
tsbr[,][7,]
mean(c((47-7)/(54),(87-17)/(87+17)))
(47-7)/(54)
(7-17)/(7+17)
i=3
im <- img_list[[i]]#rast(file.path(tilefolder,img[i]))# load the image with spectral data
qaim <- qai_list[[i]]#rast(file.path(tilefolder,gsub("BOA", "QAI", img[i])))# load the Quality Assurance layer
# calculate NBR
nbri <- switch(1+ ((lsens[i] == 'SEN2A') | (lsens[i] == 'SEN2B')), calcNBR(im[[4]], im[[6]]), calcNBR(im[[8]], im[[10]]))
nbri
nbri[,]
i <- 3
im <- img_list[[i]]#rast(file.path(tilefolder,img[i]))# load the image with spectral data
qaim <- qai_list[[i]]#rast(file.path(tilefolder,gsub("BOA", "QAI", img[i])))# load the Quality Assurance layer
# calculate NBR
nbri <- switch(1+ ((lsens[i] == 'SEN2A') | (lsens[i] == 'SEN2B')), calcNBR(im[[4]], im[[6]]), calcNBR(im[[8]], im[[10]]))
nbri[,]
(81-11)/(81+11)
im[[4]][7]
im[[4]][,]
(87-17)/(87+17)
# mask low quality data
nbrf <- mskQA(nbri, qaim, slope = c(0,1), aero = c(0,1))
nbrf[,][7]
i = 2
im <- img_list[[i]]#rast(file.path(tilefolder,img[i]))# load the image with spectral data
qaim <- qai_list[[i]]#rast(file.path(tilefolder,gsub("BOA", "QAI", img[i])))# load the Quality Assurance layer
# calculate NBR
nbri <- switch(1+ ((lsens[i] == 'SEN2A') | (lsens[i] == 'SEN2B')), calcNBR(im[[4]], im[[6]]), calcNBR(im[[8]], im[[10]]))
nbri[,][7]
(47-7)/(54)
nbri[,]
rep(rep(4:6, each =3), times = 3)
c(rep(7:9, each =3),
c(7,100,7,8,8,8,9,9,9),
rep(7:9, each =3))
rep(rep(7:9, each =3),
c(7,100,7,8,8,8,9,9,9),
rep(7:9, each =3))
sen2_10 <- empty_rast2; values(sen2_10) <- c(rep(rep(1:3, each =3), times = 3),
rep(rep(4:6, each =3), times = 3),
c(rep(7:9, each =3),
c(7,100,7,8,8,8,9,9,9),
rep(7:9, each =3)))
sen2 <- c(sen2_1, sen2_2, sen2_3, sen2_4, sen2_5, sen2_6, sen2_7, sen2_8, sen2_9, sen2_10)
st <- prepareNBRstack(img_list, qai_list, fmask, lsens, ldts, tempFun, tempRes, starttime, endtime)
expect_equal(as.numeric(st[,][8,]),c(NA,(8-18)/(8+18),mean(c((48-8)/(56),(88-18)/(88+18))),rep(NA,16),(68-18)/(68+18),rep(NA,4)))
expect_equal(as.numeric(st[,][1,]),c(NA,(1-11)/(1+11),mean(c((41-1)/(42),(81-11)/(81+11))),rep(NA,16),(61-11)/(61+11),rep(NA,4)))
expect_equal(sum(is.na(st[,][2,])),24)
expect_equal(as.numeric(st[,][3,]),c(rep(NA,19),(63-13)/(63+13),rep(NA,4)))
expect_equal(as.numeric(st[,][4,]),c(NA,(4-14)/(4+14),mean(c((44-4)/(48),(84-14)/(84+14))),rep(NA,16),(64-14)/(64+14),rep(NA,4)))
expect_equal(sum(is.na(st[,][5,])),24)
expect_equal(sum(is.na(st[,][6,])),24)
expect_equal(as.numeric(st[,][7,]),c(NA,(7-17)/(7+17),mean(c((47-7)/(54),(87-17)/(87+17))),rep(NA,16),(67-17)/(67+17),rep(NA,4)))
st[,][7,]
sen2_10[,]
sen2 <- c(sen2_1, sen2_2, sen2_3, sen2_4, sen2_5, sen2_6, sen2_7, sen2_8, sen2_9, sen2_10)
img_list <- list(lnd5,sen2,lnd8,lnd7)
qai_list <- list(lnd5_qai,sen2_qai,lnd8_qai,lnd7_qai)
fmask <- empty_rast; values(fmask) <- c(1,0,1,1,NA,NaN,1,1,1)
lsens <- c('LND05', 'SEN2A', 'LND08', 'LND07')
ldts <- as.Date(c('2000-2-4','2000-3-15','2000-3-20','2001-8-2'))
tempFun <- 'mean'
tempRes <- 'monthly'
starttime <- c(2000,1,1)
endtime <- c(2001,12,31)
st <- prepareNBRstack(img_list, qai_list, fmask, lsens, ldts, tempFun, tempRes, starttime, endtime)
expect_equal(as.numeric(st[,][7,]),c(NA,(7-17)/(7+17),mean(c((47-7)/(54),(87-17)/(87+17))),rep(NA,16),(67-17)/(67+17),rep(NA,4)))
expect_equal(as.numeric(st[,][8,]),c(NA,(8-18)/(8+18),mean(c((48-8)/(56),(88-18)/(88+18))),rep(NA,16),(68-18)/(68+18),rep(NA,4)))
expect_equal(as.numeric(st[,][9,]),c(NA,NA,(89-19)/(89+19),rep(NA,21)))
expect_equal(as.numeric(st[,][1,]),c(NA,(1-11)/(1+11),mean(c((41-1)/(42),(81-11)/(81+11))),rep(NA,16),(61-11)/(61+11),rep(NA,4)))
expect_equal(sum(is.na(st[,][2,])),24)
expect_equal(as.numeric(st[,][3,]),c(rep(NA,19),(63-13)/(63+13),rep(NA,4)))
expect_equal(as.numeric(st[,][4,]),c(NA,(4-14)/(4+14),mean(c((44-4)/(48),(84-14)/(84+14))),rep(NA,16),(64-14)/(64+14),rep(NA,4)))
expect_equal(sum(is.na(st[,][5,])),24)
expect_equal(sum(is.na(st[,][6,])),24)
expect_equal(as.numeric(st[,][7,]),c(NA,(7-17)/(7+17),mean(c((47-7)/(54),(87-17)/(87+17))),rep(NA,16),(67-17)/(67+17),rep(NA,4)))
expect_equal(as.numeric(st[,][8,]),c(NA,(8-18)/(8+18),mean(c((48-8)/(56),(88-18)/(88+18))),rep(NA,16),(68-18)/(68+18),rep(NA,4)))
expect_equal(as.numeric(st[,][9,]),c(NA,NA,(89-19)/(89+19),rep(NA,21)))
tempRes <- 'quarterly'
ldts <- as.Date(c('2000-2-4','2000-3-15','2000-5-20','2001-8-2'))
st <- prepareNBRstack(img_list, qai_list, fmask, lsens, ldts, tempFun, tempRes, starttime, endtime)
expect_equal(as.numeric(st[,][1,]),c(mean(c((1-11)/(1+11),(41-1)/42)),(81-11)/(81+11),NA,NA,NA,NA,(61-11)/(61+11),NA))
expect_equal(sum(is.na(st[,][2,])),8)
expect_equal(sum(is.na(st[,][5,])),8)
expect_equal(sum(is.na(st[,][6,])),8)
expect_equal(as.numeric(st[,][3,]),c(rep(NA,6),(63-13)/(63+13),NA))
expect_equal(as.numeric(st[,][4,]),c((4-14)/(4+14),(44-4)/(48),(84-14)/(84+14),rep(NA,4),(64-14)/(64+14),NA))
expect_equal(as.numeric(st[,][4,]),c(mean(c((4-14)/(4+14),(44-4)/48)),(84-14)/(84+14),rep(NA,4),(64-14)/(64+14),NA))
expect_equal(sum(is.na(st[,][5,])),8)
expect_equal(sum(is.na(st[,][6,])),8)
expect_equal(as.numeric(st[,][9,]),c(NA,(89-19)/(89+19),rep(NA,6)))
expect_equal(as.numeric(st[,][7,]),c(mean(c((7-17)/(7+17),(47-7)/54))),(87-17)/(87+17),rep(NA,4),(67-17)/(67+17),NA)
expect_equal(as.numeric(st[,][8,]),c(mean(c((8-18)/(8+18),(48-8)/56))),(88-18)/(88+18),rep(NA,4),(68-18)/(68+18),NA)
as.numeric(st[,][7,])
expect_equal(as.numeric(st[,][7,]),c(mean(c((7-17)/(7+17),(47-7)/54)),(87-17)/(87+17),rep(NA,4),(67-17)/(67+17),NA))
expect_equal(as.numeric(st[,][8,]),c(mean(c((8-18)/(8+18),(48-8)/56)),(88-18)/(88+18),rep(NA,4),(68-18)/(68+18),NA))
expect_equal(as.numeric(st[,][1,]),c(mean(c((1-11)/(1+11),(41-1)/42)),(81-11)/(81+11),NA,NA,NA,NA,(61-11)/(61+11),NA))
expect_equal(sum(is.na(st[,][2,])),8)
expect_equal(as.numeric(st[,][3,]),c(rep(NA,6),(63-13)/(63+13),NA))
expect_equal(as.numeric(st[,][4,]),c(mean(c((4-14)/(4+14),(44-4)/48)),(84-14)/(84+14),rep(NA,4),(64-14)/(64+14),NA))
expect_equal(sum(is.na(st[,][5,])),8)
expect_equal(sum(is.na(st[,][6,])),8)
expect_equal(as.numeric(st[,][7,]),c(mean(c((7-17)/(7+17),(47-7)/54)),(87-17)/(87+17),rep(NA,4),(67-17)/(67+17),NA))
expect_equal(as.numeric(st[,][8,]),c(mean(c((8-18)/(8+18),(48-8)/56)),(88-18)/(88+18),rep(NA,4),(68-18)/(68+18),NA))
expect_equal(as.numeric(st[,][9,]),c(NA,(89-19)/(89+19),rep(NA,6)))
endtime <- c(2001,7,31)
st <- prepareNBRstack(img_list, qai_list, fmask, lsens, ldts, tempFun, tempRes, starttime, endtime)
expect_equal(as.numeric(st[,][1,]),c(mean(c((1-11)/(1+11),(41-1)/42)),(81-11)/(81+11),NA,NA,NA,NA))
st[,][1,]
endtime <- c(2001,6,31)
st <- prepareNBRstack(img_list, qai_list, fmask, lsens, ldts, tempFun, tempRes, starttime, endtime)
expect_equal(as.numeric(st[,][1,]),c(mean(c((1-11)/(1+11),(41-1)/42)),(81-11)/(81+11),NA,NA,NA,NA))
st[,][1,]
endtime <- c(2001,6,29)
st <- prepareNBRstack(img_list, qai_list, fmask, lsens, ldts, tempFun, tempRes, starttime, endtime)
expect_equal(as.numeric(st[,][1,]),c(mean(c((1-11)/(1+11),(41-1)/42)),(81-11)/(81+11),NA,NA,NA,NA))
expect_equal(sum(is.na(st[,][2,])),6)
expect_equal(as.numeric(st[,][1,]),c(mean(c((1-11)/(1+11),(41-1)/42)),(81-11)/(81+11),NA,NA,NA,NA))
expect_equal(sum(is.na(st[,][2,])),6)
expect_equal(as.numeric(st[,][3,]),c(rep(NA,6)))
expect_equal(as.numeric(st[,][4,]),c(mean(c((4-14)/(4+14),(44-4)/48)),(84-14)/(84+14),rep(NA,4)))
st[,][3,]
expect_equal(sum(is.na(st[,][3,])),6)
expect_equal(as.numeric(st[,][4,]),c(mean(c((4-14)/(4+14),(44-4)/48)),(84-14)/(84+14),rep(NA,4)))
expect_equal(sum(is.na(st[,][5,])),8)
st[,][5,]
expect_equal(as.numeric(st[,][1,]),c(mean(c((1-11)/(1+11),(41-1)/42)),(81-11)/(81+11),NA,NA,NA,NA))
expect_equal(sum(is.na(st[,][2,])),6)
expect_equal(sum(is.na(st[,][3,])),6)
expect_equal(as.numeric(st[,][4,]),c(mean(c((4-14)/(4+14),(44-4)/48)),(84-14)/(84+14),rep(NA,4)))
expect_equal(sum(is.na(st[,][5,])),6)
expect_equal(sum(is.na(st[,][6,])),6)
expect_equal(as.numeric(st[,][7,]),c(mean(c((7-17)/(7+17),(47-7)/54)),(87-17)/(87+17),rep(NA,4)))
expect_equal(as.numeric(st[,][8,]),c(mean(c((8-18)/(8+18),(48-8)/56)),(88-18)/(88+18),rep(NA,4)))
expect_equal(as.numeric(st[,][9,]),c(NA,(89-19)/(89+19),rep(NA,4)))
starttime <- c(2000,4,2)
endtime <- c(2001,6,29)
st <- prepareNBRstack(img_list, qai_list, fmask, lsens, ldts, tempFun, tempRes, starttime, endtime)
st[,][1,]
st[,][2,]
starttime
startyr <- as.Date(paste0(starttime[1],'-',starttime[2],'-',starttime[3])) # create date object from start date
endyr <- as.Date(paste0(endtime[1],'-',endtime[2],'-',endtime[3]))# create date object from end date
dtstot <- seq(startyr, endyr, by = tres[tempRes])
dtstot
ldts
st
startdt <- as.Date(paste0(starttime[1],'-',starttime[2],'-',starttime[3]))
startdt <- as.Date(paste0(starttime[1],'-',starttime[2],'-',starttime[3]))
enddt <- as.Date(paste0(endtime[1],'-',endtime[2],'-',endtime[3]))
img_list[(ldts >= startdt) & (ldts <= enddt)]
img_list
(ldts >= startdt) & (ldts <= enddt)
ldts
startdt
enddt
starttime <- as.Date('2000-1-1')
starttime
document()
install()
empty_rast <- rast(nrows = 3, ncols = 4)
r1 <- empty_rast; values(r1) <- 1:12
r2 <- empty_rast; values(r2) <-  13:24
r3 <- empty_rast; values(r3) <-  25:36
r4 <- empty_rast; values(r4) <-  37:48
st <- c(r1,r2,r3,r4)
tempRes <- 'monthly'
dts <- seq(as.Date('2000-01-01'), as.Date('2000-04-01'), by = '1 month')
starttime <- as.Date('1999-8-1')
endtime <- as.Date('2001-1-1')
st1 <- setPeriod(st, starttime, endtime,tempRes, dts)
exp <- c(NA, NA, NA, NA, NA,  1, 13, 25, 37, NA, NA, NA, NA, NA, NA, NA, NA, NA)
expect_equal(as.numeric(st1[1]), exp)
starttime <- as.Date('2000-2-1')
endtime <- as.Date('2000-3-1')
st2 <- setPeriod(st, starttime, endtime,tempRes, dts)
exp <- c(13, 25)
expect_equal(as.numeric(st2[1]), exp)
document()
install()
tempRes
tempRes == 'monthly' || tempRes == 'quarterly'
tempRes = 'quarterly'
tempRes == 'monthly' || tempRes == 'quarterly'
tempRes = 'q'
tempRes == 'monthly' || tempRes == 'quarterly'
dts <- as.Date(c('2000-02-01','2000-04-01','2000-04-08','2000-09-20'))
mnths <- format(dts, '%m')
mnths
mnths <- as.numeric(format(dts, '%m'))
mnths
revalue(format(dts, '%m'), c("02" = "01", "03" = "01",
"05" = "04", "06" = "04",
"08" = "07", "09" = "07",
"11" = "10", "12" = "10"))
library(plyr)
revalue(format(dts, '%m'), c("02" = "01", "03" = "01",
"05" = "04", "06" = "04",
"08" = "07", "09" = "07",
"11" = "10", "12" = "10"))
revalue(format(dts, '%m'), c("01" = "01", "02" = "01", "03" = "01",
"04" = "04", "05" = "04", "06" = "04",
"06" = "06", "08" = "07", "09" = "07",
"10" = "10", "11" = "10", "12" = "10"))
dts <- as.Date(c('2000-02-01','2000-05-01','2000-04-08','2000-09-20'))
revalue(format(dts, '%m'), c("01" = "01", "02" = "01", "03" = "01",
"04" = "04", "05" = "04", "06" = "04",
"06" = "06", "08" = "07", "09" = "07",
"10" = "10", "11" = "10", "12" = "10"))
mnths <- revalue(format(dts, '%m'), c("01" = "01", "02" = "01", "03" = "01",
"04" = "04", "05" = "04", "06" = "04",
"06" = "06", "08" = "07", "09" = "07",
"10" = "10", "11" = "10", "12" = "10"))
format(dts,'%Y')
paste0(format(dts,'%Y'),'-')
paste0(format(dts,'%Y'),'-',mnths)
paste0(format(dts,'%Y'),'-',mnths,'-01')
out <- as.Date(paste0(format(dts,'%Y'),'-',mnths,'-01'))
out
document()
install()
document()
(NA == 1)
empty_rast <- rast(ncols = 3, nrows = 3)
m1 <- empty_rast; values(m1) <- c(1,0,0,1,1,1,1,1,1)
# fire: 1 equals fire
f1 <- empty_rast; values(f1) <- c(0,0,0,0,0,0,0,0,0)
f2 <- empty_rast; values(f2) <- c(0,0,0,0,0,0,0,0,0)
f3 <- empty_rast; values(f3) <- c(0,0,0,0,0,0,0,0,0)
f4 <- empty_rast; values(f4) <- c(1,0,0,0,0,0,0,0,0)
f5 <- empty_rast; values(f5) <- c(0,0,0,1,1,1,1,1,1)
f6 <- empty_rast; values(f6) <- c(0,0,0,0,0,0,0,0,0)
f7 <- empty_rast; values(f7) <- c(1,0,0,0,0,0,0,0,0)
f8 <- empty_rast; values(f8) <- c(0,0,0,0,0,0,0,0,0)
f9 <- empty_rast; values(f9) <- c(0,0,0,0,0,0,0,0,0)
f10 <- empty_rast; values(f10) <- c(0,0,0,0,0,0,0,0,0)
r1 <- empty_rast; values(r1) <- rep(1, 9)
r2 <- empty_rast; values(r2) <- rep(1, 9)
r3 <- empty_rast; values(r3) <- rep(1, 9)
r4 <- empty_rast; values(r4) <- c(-12,1,1,1,1,1,1,1,1)
r5 <- empty_rast; values(r5) <- c(-11,1,1,-5,-3,-3,-3,-3,-3)
r6 <- empty_rast; values(r6) <- c(-10,1,1,-4,-2,-2,-2,-2,-2)
r7 <- empty_rast; values(r7) <- c(-9,1,1,-3,-1,-1,-1,-1,-1)
r8 <- empty_rast; values(r8) <- c(-8,1,1,-2,0,0,0,0,0)
r9 <- empty_rast; values(r9) <- c(-7,1,1,-1,1,1,1,1,1)
r10 <- empty_rast; values(r10) <- c(-6,1,1,0,1,1,1,1,1)
#create stack
st <- c(m1,f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10)
# Calculate stability indicators (RRI, R80P, YrYr, Sl)
out <- app(st, function(x){calcRecoveryStack(x, maxBreak=T, obspyr=1, inp = 'raw', shortDenseTS = FALSE,
nPre = 2, nDist = 0, nPostMin = 4, nPostMax = 5, h = 0.15, timeThres = 2, seas=F)})
document()
install()
# create time series of monthly max
brmomax <- app(st, function(x){toRegularTSStack(x, dts, fun = 'max', resol = 'monthly')})
names(brmomax) <- as.Date(toRegularTS(dts, dts, fun = 'max', resol = 'monthly'))
# create time series of monthly mean values
brmomean <- app(st, function(x){toRegularTSStack(x, dts, fun = 'mean', resol = 'monthly')})
names(brmomean) <- as.Date(toRegularTS(dts, dts, fun = 'mean', resol = 'monthly'))
# create daily time series
brday <- app(st, function(x){toRegularTSStack(x, dts, fun = 'max', resol = 'daily')})
names(brday) <- date_decimal(as.numeric(time(bfastts(rep(1,length(dts)), dts, type = "irregular"))))
# create quarterly time series
brquart <- app(st, function(x){toRegularTSStack(x, dts, fun = 'max', resol = 'quart')})
names(brquart) <- as.Date(toRegularTS(dts, dts, fun = 'mean', resol = 'quart'))
