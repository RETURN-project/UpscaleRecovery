fname <- 'Selection_Fire_95_Yr_2018_2018_scl_250'
msk <- raster(paste0(ifolder, fname, '.tif'))
sel  <- Which(msk > 0, cells= T)
shp <-xyFromCell(msk,sel,spatial=T)
shapefile(shp,paste0(ifolder, fname),overwrite=T)
library(rgdal)
library(raster)
ifolder <- 'C:\\Users\\keers001\\OneDrive\ -\ WageningenUR\\RETURN\\Data\\RETURN\\20200107_Upscaling\\SelectionPix\\'
fname <- 'Selection_Fire_95_For__Yr_2018_2018_scl_250'
msk <- raster(paste0(ifolder, fname, '.tif'))
sel  <- Which(msk > 0, cells= T)
shp <-xyFromCell(msk,sel,spatial=T)
shapefile(shp,paste0(ifolder, fname),overwrite=T)
# if(length(sel)>0){
#   smp <- sample(length(sel),nsamp)
#   sel<- sel[smp]
#   shp <-xyFromCell(msk,sel,spatial=T)
#   shapefile(shp,paste0(ifolder, 'LSTS_FireArea_SantaRem_smp_', nsamp),overwrite=T)
# }
library(rgdal)
library(raster)
ifolder <- 'C:\\Users\\keers001\\OneDrive\ -\ WageningenUR\\RETURN\\Data\\RETURN\\20200107_Upscaling\\SelectionPix\\'
fname <- 'Selection_Fire_95_For_Tree_80_Yr_2018_2018_scl_250'
msk <- raster(paste0(ifolder, fname, '.tif'))
sel  <- Which(msk > 0, cells= T)
shp <-xyFromCell(msk,sel,spatial=T)
shapefile(shp,paste0(ifolder, fname),overwrite=T)
# if(length(sel)>0){
#   smp <- sample(length(sel),nsamp)
#   sel<- sel[smp]
#   shp <-xyFromCell(msk,sel,spatial=T)
#   shapefile(shp,paste0(ifolder, 'LSTS_FireArea_SantaRem_smp_', nsamp),overwrite=T)
# }
shapefile(shp,paste0(ifolder, fname),overwrite=T)
library(rgdal)
library(raster)
ifolder <- 'C:\\Users\\keers001\\OneDrive\ -\ WageningenUR\\RETURN\\Data\\RETURN\\20200107_Upscaling\\SelectionPix\\'
fname <- 'Selection_Fire_95_Han_For_Tree_80_Yr_2018_2018_scl_250'
msk <- raster(paste0(ifolder, fname, '.tif'))
sel  <- Which(msk > 0, cells= T)
shp <-xyFromCell(msk,sel,spatial=T)
shapefile(shp,paste0(ifolder, fname),overwrite=T)
# if(length(sel)>0){
#   smp <- sample(length(sel),nsamp)
#   sel<- sel[smp]
#   shp <-xyFromCell(msk,sel,spatial=T)
#   shapefile(shp,paste0(ifolder, 'LSTS_FireArea_SantaRem_smp_', nsamp),overwrite=T)
# }
library(rgdal)
library(raster)
ifolder <- 'C:\\Users\\keers001\\OneDrive\ -\ WageningenUR\\RETURN\\Data\\RETURN\\20200107_Upscaling\\SelectionPix\\'
fname <- 'Selection_Fire_95_Han_For_Tree_80_Yr_2009_2009_scl_250'
msk <- raster(paste0(ifolder, fname, '.tif'))
sel  <- Which(msk > 0, cells= T)
shp <-xyFromCell(msk,sel,spatial=T)
shapefile(shp,paste0(ifolder, fname),overwrite=T)
# if(length(sel)>0){
#   smp <- sample(length(sel),nsamp)
#   sel<- sel[smp]
#   shp <-xyFromCell(msk,sel,spatial=T)
#   shapefile(shp,paste0(ifolder, 'LSTS_FireArea_SantaRem_smp_', nsamp),overwrite=T)
# }
library(rgdal)
library(raster)
ifolder <- 'C:\\Users\\keers001\\OneDrive\ -\ WageningenUR\\RETURN\\Data\\RETURN\\20200107_Upscaling\\SelectionPix\\'
fname <- 'Selection_Fire_95_Han_For_Tree_80_Yr_2009_2009_scl_250'
msk <- raster(paste0(ifolder, fname, '.tif'))
sel  <- Which(msk > 0, cells= T)
shp <-xyFromCell(msk,sel,spatial=T)
shapefile(shp,paste0(ifolder, fname),overwrite=T)
# if(length(sel)>0){
#   smp <- sample(length(sel),nsamp)
#   sel<- sel[smp]
#   shp <-xyFromCell(msk,sel,spatial=T)
#   shapefile(shp,paste0(ifolder, 'LSTS_FireArea_SantaRem_smp_', nsamp),overwrite=T)
# }
library(rgdal)
library(raster)
ifolder <- 'C:\\Users\\keers001\\OneDrive\ -\ WageningenUR\\RETURN\\Data\\RETURN\\20200107_Upscaling\\SelectionPix\\'
fname <- 'Selection_Fire_95_Han_For_Tree_80_Yr_2010_2010_scl_250'
msk <- raster(paste0(ifolder, fname, '.tif'))
sel  <- Which(msk > 0, cells= T)
shp <-xyFromCell(msk,sel,spatial=T)
shapefile(shp,paste0(ifolder, fname),overwrite=T)
# if(length(sel)>0){
#   smp <- sample(length(sel),nsamp)
#   sel<- sel[smp]
#   shp <-xyFromCell(msk,sel,spatial=T)
#   shapefile(shp,paste0(ifolder, 'LSTS_FireArea_SantaRem_smp_', nsamp),overwrite=T)
# }
library(rgdal)
library(raster)
ifolder <- 'C:\\Users\\keers001\\OneDrive\ -\ WageningenUR\\RETURN\\Data\\RETURN\\20200107_Upscaling\\SelectionPix\\'
fname <- 'Selection_Fire_95_Han_For_Tree_80_Yr_2011_2011_scl_250'
msk <- raster(paste0(ifolder, fname, '.tif'))
sel  <- Which(msk > 0, cells= T)
shp <-xyFromCell(msk,sel,spatial=T)
shapefile(shp,paste0(ifolder, fname),overwrite=T)
# if(length(sel)>0){
#   smp <- sample(length(sel),nsamp)
#   sel<- sel[smp]
#   shp <-xyFromCell(msk,sel,spatial=T)
#   shapefile(shp,paste0(ifolder, 'LSTS_FireArea_SantaRem_smp_', nsamp),overwrite=T)
# }
library(raster)
# Source function
source('R/getMap.R')
# Working examples of getMap function
getMap("Italy", 0)
getMap("Netherlands", 1)
getMap("Belgium", 2)
source('R/getMap.R')
raster::getData("ISO3")
country <- 'Belgium'
level <- 0
# Create directory 'data' if not exists
datdir <- 'data'
if (!dir.exists(datdir)){
dir.create(datdir, showWarnings = FALSE)
}
if (!is.character(country)) {
stop("country must be of class character")
}
if (level < 0 || level > 2){
stop("level should be either 0, 1 or 2")
}
list_of_codes <- raster::getData("ISO3")
c
list_of_codes
list_of_codes$NAME
list_of_codes$ISO3
country_code <- list_of_codes$ISO3[list_of_codes$NAME==country]
country_code
? raster::getData
adm <- raster::getData("GADM", country = country_code,
level = level, path = datdir)
plot(adm)
plot(adm, bg = "grey50", axes=T)
plot(adm, lwd = 10, border = "black", add=T)
plot(adm, col = "green4", add = T)
grid()
box()
plot(adm)
plot(adm, bg = "grey50", axes=T)
plot(adm, lwd = 10, border = "black", add=T)
plot(adm, col = "green4", add = T)
grid()
box()
plot(adm)
plot(adm, bg = "grey50", axes=T)
plot(adm, lwd = 10, border = "black", add=T)
plot(adm, col = "green4", add = T)
grid()
box()
if (level == 0){
lbl <- adm$NAME_0
size <- 1.1
} else if (level == 1){
lbl <- adm$NAME_1
size <- 1.1
} else if (level == 2){
lbl <- adm$NAME_2
size <- 0.7
}
invisible(text(getSpPPolygonsLabptSlots(adm),
labels = as.character(lbl), cex = size, col = "white", font = 2))
adm
getSpPPolygonsLabptSlots(adm)
mtext(side = 3, line = 1, paste("Map of", country), cex = 2)
mtext(side = 1, "Longitude", line = 2.5, cex=1.1)
mtext(side = 2, "Latitude", line = 2.5, cex=1.1)
text(2.5, 49.6, "Projection: Geographic\n
Coordinate System: WGS 1984\n
Data Source: GADM.org", adj = c(0, 0), cex = 0.7, col = "black")
level <- 2
# Create directory 'data' if not exists
datdir <- 'data'
if (!dir.exists(datdir)){
dir.create(datdir, showWarnings = FALSE)
}
if (!is.character(country)) {
stop("country must be of class character")
}
if (level < 0 || level > 2){
stop("level should be either 0, 1 or 2")
}
# Look up country ISO3 code name
list_of_codes <- raster::getData("ISO3")
country_code <- list_of_codes$ISO3[list_of_codes$NAME==country]
adm <- raster::getData("GADM", country = country_code,
level = level, path = datdir)
plot(adm)
plot(adm, bg = "grey50", axes=T)
plot(adm, lwd = 10, border = "black", add=T)
plot(adm, col = "green4", add = T)
grid()
box()
if (level == 0){
lbl <- adm$NAME_0
size <- 1.1
} else if (level == 1){
lbl <- adm$NAME_1
size <- 1.1
} else if (level == 2){
lbl <- adm$NAME_2
size <- 0.7
}
invisible(text(getSpPPolygonsLabptSlots(adm),
labels = as.character(lbl), cex = size, col = "white", font = 2))
mtext(side = 3, line = 1, paste("Map of", country), cex = 2)
mtext(side = 1, "Longitude", line = 2.5, cex=1.1)
mtext(side = 2, "Latitude", line = 2.5, cex=1.1)
text(2.5, 49.6, "Projection: Geographic\n
Coordinate System: WGS 1984\n
Data Source: GADM.org", adj = c(0, 0), cex = 0.7, col = "black")
getSpPPolygonsLabptSlots(adm)
?mtext
?getSpPPolygonsLabptSlots
library(rgdal)
library(raster)
ifolder <- 'C:\\Users\\keers001\\OneDrive\ -\ WageningenUR\\RETURN\\Data\\RETURN\\20200107_Upscaling\\SelectionPix\\'
fname <- 'Selection_Fire_95_Han_For_Tree_80_Yr_2012_2012_scl_250'
msk <- raster(paste0(ifolder, fname, '.tif'))
sel  <- Which(msk > 0, cells= T)
shp <-xyFromCell(msk,sel,spatial=T)
shapefile(shp,paste0(ifolder, fname),overwrite=T)
# if(length(sel)>0){
#   smp <- sample(length(sel),nsamp)
#   sel<- sel[smp]
#   shp <-xyFromCell(msk,sel,spatial=T)
#   shapefile(shp,paste0(ifolder, 'LSTS_FireArea_SantaRem_smp_', nsamp),overwrite=T)
# }
library(rgdal)
library(raster)
ifolder <- 'C:\\Users\\keers001\\OneDrive\ -\ WageningenUR\\RETURN\\Data\\RETURN\\20200107_Upscaling\\SelectionPix\\'
fname <- 'Selection_Fire_95_Han_For_Tree_80_Yr_2013_2013_scl_250'
msk <- raster(paste0(ifolder, fname, '.tif'))
sel  <- Which(msk > 0, cells= T)
shp <-xyFromCell(msk,sel,spatial=T)
shapefile(shp,paste0(ifolder, fname),overwrite=T)
# if(length(sel)>0){
#   smp <- sample(length(sel),nsamp)
#   sel<- sel[smp]
#   shp <-xyFromCell(msk,sel,spatial=T)
#   shapefile(shp,paste0(ifolder, 'LSTS_FireArea_SantaRem_smp_', nsamp),overwrite=T)
# }
library(rgdal)
library(raster)
ifolder <- 'C:\\Users\\keers001\\OneDrive\ -\ WageningenUR\\RETURN\\Data\\RETURN\\20200107_Upscaling\\SelectionPix\\'
fname <- 'Selection_Fire_95_Han_For_Tree_80_Yr_2014_2014_scl_250'
msk <- raster(paste0(ifolder, fname, '.tif'))
sel  <- Which(msk > 0, cells= T)
shp <-xyFromCell(msk,sel,spatial=T)
shapefile(shp,paste0(ifolder, fname),overwrite=T)
# if(length(sel)>0){
#   smp <- sample(length(sel),nsamp)
#   sel<- sel[smp]
#   shp <-xyFromCell(msk,sel,spatial=T)
#   shapefile(shp,paste0(ifolder, 'LSTS_FireArea_SantaRem_smp_', nsamp),overwrite=T)
# }
library(rgdal)
library(raster)
ifolder <- 'C:\\Users\\keers001\\OneDrive\ -\ WageningenUR\\RETURN\\Data\\RETURN\\20200107_Upscaling\\SelectionPix\\'
fname <- 'Selection_Fire_95_Han_For_Tree_80_Yr_2015_2015_scl_250'
msk <- raster(paste0(ifolder, fname, '.tif'))
sel  <- Which(msk > 0, cells= T)
shp <-xyFromCell(msk,sel,spatial=T)
shapefile(shp,paste0(ifolder, fname),overwrite=T)
# if(length(sel)>0){
#   smp <- sample(length(sel),nsamp)
#   sel<- sel[smp]
#   shp <-xyFromCell(msk,sel,spatial=T)
#   shapefile(shp,paste0(ifolder, 'LSTS_FireArea_SantaRem_smp_', nsamp),overwrite=T)
# }
library(rgdal)
library(raster)
ifolder <- 'C:\\Users\\keers001\\OneDrive\ -\ WageningenUR\\RETURN\\Data\\RETURN\\20200107_Upscaling\\SelectionPix\\'
fname <- 'Selection_Fire_95_Han_For_Tree_80_Yr_2016_2016_scl_250'
msk <- raster(paste0(ifolder, fname, '.tif'))
sel  <- Which(msk > 0, cells= T)
shp <-xyFromCell(msk,sel,spatial=T)
shapefile(shp,paste0(ifolder, fname),overwrite=T)
# if(length(sel)>0){
#   smp <- sample(length(sel),nsamp)
#   sel<- sel[smp]
#   shp <-xyFromCell(msk,sel,spatial=T)
#   shapefile(shp,paste0(ifolder, 'LSTS_FireArea_SantaRem_smp_', nsamp),overwrite=T)
# }
library(rgdal)
library(raster)
ifolder <- 'C:\\Users\\keers001\\OneDrive\ -\ WageningenUR\\RETURN\\Data\\RETURN\\20200107_Upscaling\\SelectionPix\\'
fname <- 'Selection_Fire_95_Han_For_Tree_80_Yr_2017_2017_scl_250'
msk <- raster(paste0(ifolder, fname, '.tif'))
sel  <- Which(msk > 0, cells= T)
shp <-xyFromCell(msk,sel,spatial=T)
shapefile(shp,paste0(ifolder, fname),overwrite=T)
# if(length(sel)>0){
#   smp <- sample(length(sel),nsamp)
#   sel<- sel[smp]
#   shp <-xyFromCell(msk,sel,spatial=T)
#   shapefile(shp,paste0(ifolder, 'LSTS_FireArea_SantaRem_smp_', nsamp),overwrite=T)
# }
downloadPrepare <- function(url, file, dir){
# Download file from url and save as file argument
download.file(url, file, method = 'auto')
# Unpack the data in specified directory
unzip(file, exdir = dir)
# Create and return raster stacks from the tif files of the unpacked data
tifs <- list.files(dir, pattern = glob2rx('*.tif'), full.names = TRUE)
return(stack(tifs))
}
#Import libraries
library(raster)
library(sf)
library(rgdal)
library(randomForest)
# Create 'data' and 'output' folders if they don't already exist
if(!dir.exists(path = 'data')) {
dir.create(path = 'data')
}
if(!dir.exists(path = 'output')) {
dir.create(path = 'output')
}
## Use function to download and prepare the data
Gewata <- downloadPrepare('https://raw.githubusercontent.com/GeoScripting-WUR/AdvancedRasterAnalysis/gh-pages/data/Gewata.zip', 'data/Gewata.zip', 'data')
Gewata
names(Gewata)
eth <- getData('GADM', country = 'ETH', level = 3, path = 'data')
gwt <- eth[eth$NAME_3 == "Getawa",]
gwt <- spTransform(gwt, CRSobj = crs(Gewata))
Gewata <- mask(x = Gewata, mask = Gewata$lulcGewata)
plot(Gewata$lulcGewata)
polys <- readOGR(list.files('data', pattern = glob2rx('*.geojson'), full.names = TRUE))
polys <- spTransform(polys, crs(proj4string(Gewata)))
plot(polys, add=T)
polys$Code <- as.numeric(polys$Class)
polys$Class
reference_raster <- Gewata$lulcGewata
reference_raster
# Save lulc map as ground truth
reference_raster <- Gewata$lulcGewata
# Remove ground truth from the training raster
covs <- dropLayer(Gewata, 7)
# Assign 'Code' values to raster cells. where they overlap with the training polygons
trainRaster <- rasterize(polys, covs, field = 'Code')
# Set name of raster to class
names(trainRaster) <- "class"
# Mask the coovariates raster by the train raster, to only contain the polygons
covmasked <- mask(covs, trainRaster)
# Add the train raster to the masked covariate stack
trainStack <- addLayer(covmasked, trainRaster)
# Transform the stack into a matrix, and change the class type from integer to factor
trainMatrix <- as.data.frame(na.omit(getValues(trainStack)))
trainMatrix$class <- factor(trainMatrix$class, levels = c(1:3))
# Create an RF model with covariates as x variable, and class and y variable
set.seed(500)
modelRF <- randomForest(class ~ ., data = trainMatrix, classification = TRUE)
# Ensure that the names between covariates and training matrix correspond exactly
names(covs)
names(trainMatrix)
# Now predict the entire area using the covariates
prediction <- predict(covs, modelRF, na.rm = TRUE)
# Save the prediction raster as GeoTIFF
writeRaster(prediction, "output/Gewata_LC_prediction.tif", overwrite= TRUE)
# Visualize the prediction raster
png("output/Gewata_prediction.png")
par(mfrow = c(1,2))
cols <- c("orange", "dark green", "light blue")
plot(reference_raster, col = cols, legend = FALSE, main = "Actual landcover Gewata")
legend("topright",
legend = c("cropland", "forest", "wetland"),
fill = cols, bg = "white")
plot(prediction, col = cols, legend = FALSE, main = "Predicted landcover Gewata")
legend("topright",
legend = c("cropland", "forest", "wetland"),
fill = cols, bg = "white")
dev.off()
# Obtain reference raster and predicition raster as matrices and omitting NAs for comparison
lulcMatrix <- as.matrix(na.omit(getValues(reference_raster)))
predMatrix <- as.matrix(na.omit(getValues(prediction)))
# Create confusion matrix and assign row and col names
cm_test = table(predMatrix, lulcMatrix)
rownames(cm_test) <- c("cropland", "forest", "wetland")
colnames(cm_test) <- c("cropland", "forest", "wetland")
# Write confusion matrix to file
write.csv(cm_test, file= "output/confusion_matrix.csv")
# Compute overall accuracy
prediction_accuracy = sum(diag(cm_test)) / sum(cm_test) * 100
print(paste0("The overall prediction accuracy is ", round(prediction_accuracy),"%"))
inp = 'smooth'
(inp == 'smooth') | (inp == 'raw')
inp = 'raw'
(inp == 'smooth') | (inp == 'raw')
inp = 'rw'
(inp == 'smooth') | (inp == 'raw')
data(vdendool)
tmp = unstack(vdendool)
## create random points
set.seed(123)
pts = as(sampleRandom(vdendool, size = 5, sp = TRUE), "SpatialPoints")
library(remote)
library(reshape2)
data(vdendool)
tmp = unstack(vdendool)
## create random points
set.seed(123)
pts = as(sampleRandom(vdendool, size = 5, sp = TRUE), "SpatialPoints")
install.packages('remote')
library(remote)
library(reshape2)
data(vdendool)
tmp = unstack(vdendool)
## create random points
set.seed(123)
pts = as(sampleRandom(vdendool, size = 5, sp = TRUE), "SpatialPoints")
pts
plot(pts)
SpatialPoints(c(-53.8656330476535,
-3.49574794365732))
?shapefile
data(bupa)
parallelplot(bupa,"Bupa Dataset")
install.packages('dprep')
install.packages('ggally')
install.packages('GGally')
# Libraries
library(GGally)
# Data set is provided by R natively
data <- iris
# Plot
ggparcoord(data,
columns = 1:4, groupColumn = 5
)
library(hrbrthemes)
library(GGally)
library(viridis)
# Data set is provided by R natively
data <- iris
# Plot
ggparcoord(data,
columns = 1:4, groupColumn = 5, order = "anyClass",
showPoints = TRUE,
title = "Parallel Coordinate Plot for the Iris Data",
alphaLines = 0.3
) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum()+
theme(
plot.title = element_text(size=10)
)
install.packages(hrbrthemes)
install.packages('hrbrthemes')
library(hrbrthemes)
library(GGally)
library(viridis)
# Data set is provided by R natively
data <- iris
# Plot
ggparcoord(data,
columns = 1:4, groupColumn = 5, order = "anyClass",
showPoints = TRUE,
title = "Parallel Coordinate Plot for the Iris Data",
alphaLines = 0.3
) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum()+
theme(
plot.title = element_text(size=10)
)
ggparcoord(data,
columns = 1:4, groupColumn = 5, order = "anyClass",
scale="globalminmax",
showPoints = TRUE,
title = "No scaling",
alphaLines = 0.3
) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum()+
theme(
legend.position="none",
plot.title = element_text(size=13)
) +
xlab("")
head(data)
load('C:\\Users\\keers001\\OneDrive - WageningenUR\\RETURN\\Data\\RETURN\\20191019_SimulationOptSAR\\Landsat\\Char\\LSTS_RndmSample_NoFire_5_Tree_80_scl_30_npnt_20000_VI_Trbf.rda')
save('C:\\Users\\keers001\\OneDrive - WageningenUR\\RETURN\\Data\\RETURN\\20191019_SimulationOptSAR\\Landsat\\Char\\LSTS_RndmSample_NoFire_5_Tree_80_scl_30_npnt_20000_VI_Trbf_c.rda',
compress = 'gzip')
save(dataVITrbf,'C:\\Users\\keers001\\OneDrive - WageningenUR\\RETURN\\Data\\RETURN\\20191019_SimulationOptSAR\\Landsat\\Char\\LSTS_RndmSample_NoFire_5_Tree_80_scl_30_npnt_20000_VI_Trbf_c.rda',
compress = 'gzip')
save(dataVITrbf,file = 'C:\\Users\\keers001\\OneDrive - WageningenUR\\RETURN\\Data\\RETURN\\20191019_SimulationOptSAR\\Landsat\\Char\\LSTS_RndmSample_NoFire_5_Tree_80_scl_30_npnt_20000_VI_Trbf_c.rda',
compress = 'gzip')
save(dataVITrbf,file = 'C:\\Users\\keers001\\OneDrive - WageningenUR\\RETURN\\Data\\RETURN\\20191019_SimulationOptSAR\\Landsat\\Char\\LSTS_RndmSample_NoFire_5_Tree_80_scl_30_npnt_20000_VI_Trbf_c.rda',
compress = 'bzip2')
save(dataVITrbf,file = 'C:\\Users\\keers001\\OneDrive - WageningenUR\\RETURN\\Data\\RETURN\\20191019_SimulationOptSAR\\Landsat\\Char\\LSTS_RndmSample_NoFire_5_Tree_80_scl_30_npnt_20000_VI_Trbf_c.rda',
compress = 'xz')
save(dataVITrbf,file = 'C:\\Users\\keers001\\OneDrive - WageningenUR\\RETURN\\Data\\RETURN\\20191019_SimulationOptSAR\\Landsat\\Char\\LSTS_RndmSample_NoFire_5_Tree_80_scl_30_npnt_20000_VI_Trbf_c.rda',
compress = 'gzip',
compression_level=9)#xz
save(dataVITrbf,file = 'C:\\Users\\keers001\\OneDrive - WageningenUR\\RETURN\\Data\\RETURN\\20191019_SimulationOptSAR\\Landsat\\Char\\LSTS_RndmSample_NoFire_5_Tree_80_scl_30_npnt_20000_VI_Trbf_c.rda',
compress = 'xz',
compression_level=9)#
save(dataVITrbf,file = 'C:\\Users\\keers001\\OneDrive - WageningenUR\\RETURN\\Data\\RETURN\\20191019_SimulationOptSAR\\Landsat\\Char\\LSTS_RndmSample_NoFire_5_Tree_80_scl_30_npnt_20000_VI_Trbf_c.rda',
compress = 'xz',
compression_level=10)#
save(dataVITrbf,file = 'C:\\Users\\keers001\\OneDrive - WageningenUR\\RETURN\\Data\\RETURN\\20191019_SimulationOptSAR\\Landsat\\Char\\LSTS_RndmSample_NoFire_5_Tree_80_scl_30_npnt_20000_VI_Trbf_c.rda',
compress = 'xz',
compression_level=9)#
source('C:\\Users\\keers001\\Dropbox\\output\\Jupyter_notebook\\BenchmarkRecovery\\R\\Functions\\sim_Functions.Rmd')
file <- 'C:\\Users\\keers001\\Dropbox\\output\\Jupyter_notebook\\BenchmarkRecovery\\R\\Functions\\sim_Functions.Rmd'
outfile <- 'C:\\Users\\keers001\\Dropbox\\output\\Jupyter_notebook\\BenchmarkRecovery\\R\\Functions\\sim_FunctionsR.R'
knitr::purl(file, output=outfile, quiet = TRUE)
setwd('C:\\Users\\keers001\\Dropbox\\output\\Script_R\\UpscaleRecovery')
